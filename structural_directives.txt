

STRUCTURAL DIRECTIVES:
======================
these directives alther the layout of the dom by 
adding or removeing elements. common examples 
include ngif,ngfor, and ngswitch.

we previously use structural directives syntax *ngif , *ngFor , *ngSwitch 

but updates syntax is @if ,@For,@Switch

if we want work with directives import module NgIf in app.component.ts imports.
in old way if we want use else condion we write another tag for that like


<h2 *ngIf="isenable">{{user}}</h2>

<h1 *ngIf="!isenable">user not found</h1>

******************************use ng-template to alternative of ngelse(!isenable)***************
CHECK NG-TEMPLATE FILE FOR INDETAILED.


NEW WAY
========
but in new syntax is very simple to define else condition

@if(isenable){
  <h3 style="color: red;">{{user}}</h3>
}
@else{
  <h3 style="color: green;">{{user}}</h3>
}



		NUMBER VALUES CONDITIONS 
		========================
if directive with number values:
===============================
@if(logincount < 4){
  <button (click)="checkfordata()" >new syntax</button>
  }
@if(logincount  == 4){
  <h1>exceeded 3 attempts</h1>
}
logincount = 0;
checkfordata(){
  this.logincount ++;
  console.log(this.logincount);
}

		STRING VALUES CONDITIONS
		========================

@if(user == 'nagavalli'){
  <button style="background-color: brown;">click</button>
}
@else{
  <button style="background-color: red;">click</button>
}


		 NGFOR DIRECTIVE
		 ===============

when we use this ngFor in old syntax 

<h1 *ngFor="let i of users">{{i}}</h1>

but in new syntax we doesnt use let keyword insted we use track expression and var name 

@for(i of users;track i){
  <h5>{{i}}</h5>
}

UNORDERLIST WITH NEW SYNTAX
============================

<!-- USEING UNORDERLIST WITH FOR IN NEW SYNTAX -->
<ul>
@for(i of users;track i){
  <!-- <h5>{{i}}</h5> -->
    <li>{{i}}</li>
}
</ul>

		FETCH OBJ ARRAYS WITH NGFOR
		===========================
 <ul>
@for(user of userObj; track user){
  <li>{{user.gmail}}</li>
}
</ul>

userObj :Array<any> = [ 
   {id:1,name:'valli',gmail:'vallikatta226@gmail.com'},
   {id:2,name:'siva',gmail:'siva@gmail.com'},
   {id:3,name:'karthik',gmail:'karthik@gmail.com'}
]
**************************************************
<!-- <h5 *ngFor="let user of userObj; let i = index">{{i}} {{user.name}} <button (click)="ondelete(user)">delete</button></h5> -->
<h5 *ngFor="let user of userObj; let i = index">{{i}} {{user.name}} <button (click)="ondelete(i)">delete</button></h5>

<!-- NEW APROACH -->
<ol>
@for(user of userObj;track user;let  i = $index){
 <li>
    <!--  DELETE WITH INDEX VALUES -->
    {{user.name}} <button (click)="ondelete(i)">delete</button>
    <!-- {{user.name}} <button (click)="ondelete(user)">delete</button> -->
  </li>
}
</ol>
	
if we want to  delete user based on index in new syntax it is quite diffrent 
we use $ symbol before to declare value.


		ARRAY LENGTH INDEX
		==================
we use this in constructor 
constructor(){
	this.userObj.length
} like this know how to use this in ng version look below ngfor count


		NGFOR COUNT
		===========
@if(userObj.length > 0){
  <h1 style="color: green;">users are existed in this array</h1>
}
@else{
  <h1 style="color: red;">there is no users in this array</h1>
}
{{usercount}} {{user.name}} <button (click)="ondelete(i)">delete</button>

	
			EMPTY SYNTAX
			============
@empty {
	add anything to display in browser
}


this empty syntax only used inside the for block

<ol>
@for(user of userObj;track user;let  i = $index;let usercount = $count){
 <li>
    <!--  DELETE WITH INDEX VALUES -->
   <!-- {{userObj.length}} {{user.name}} <button (click)="ondelete(i)">delete</button> <br><br> -->
    <!-- {{user.name}} <button (click)="ondelete(user)">delete</button> -->
    {{usercount}} {{user.name}} <button (click)="ondelete(i)">delete</button>
  </li>
  
}

@empty{
  <p>this is render from empty syntax block</p>
}
</ol>


useing this empty syntax block we dont have to use any condition to show this msg 
just use empty block to render the msg in view 


		PROPERTIES- FOR LOOP
		=====================
$odd : true, if the index is odd.
$count : the number of the items in the collection.
$first : true, if the current item is the first in the collection.
$last : true, if the current item is the last in the collection.

			NG SWITCHCASE
			=============
old way syntax approch:
=======================
		<!-- NG SWITCH CASE  -->
<div [ngSwitch]="userrole">
  <p *ngSwitchCase="'admin'">welcome admin</p>
  <p  *ngSwitchCase="'user'">welcome user</p>
  <!-- IT SHOWS BY DEFAULT IF THERE IS NO VALUE BUT THIS IS NOT GOOD PRACTICE -->
  <p  *ngSwitchCase="''">welcome user</p>
  <!-- BY DEFAULT RENDER IF THERE IS NO VALUE USE NGSWITCHDEFAULT  -->
  <P *ngswitchDeafult>value render by default</P>
</div>

NEW WAY SYNTAX:
==============
 @switch(userrole){
  @case('admin'){
    <p>welcome admin</p>
  }
  @case('user'){
    <p>welcome user</p>
  }
  @default{
    <p>default value</p>
  }
  
 }